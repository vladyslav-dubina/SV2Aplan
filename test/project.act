assign1 = (
		(1)->
		("Locked_register_example#module_1:action 'lock_status=10';")
		(lock_status=10)),

if_1 = (
		(~module_1.resetn)->
		("Locked_register_example#module_1:action 'if (~resetn)';")
		(1)),

if_2 = (
		(module_1.Lock)->
		("Locked_register_example#module_1:action 'if (Lock)';")
		(1)),

if_3 = (
		(~module_1.Lock)->
		("Locked_register_example#module_1:action 'if (~Lock)';")
		(1)),

assign_2 = (
		(1)->
		("Locked_register_example#module_1:action 'lock_status <= 1'b0';")
		(module_1.lock_status <= 0)),

assign_3 = (
		(1)->
		("Locked_register_example#module_1:action 'lock_status <= 1'b1';")
		(module_1.lock_status <= 1)),

assign_4 = (
		(1)->
		("Locked_register_example#module_1:action 'lock_status <= lock_status';")
		(module_1.lock_status <= module_1.lock_status)),

if_4 = (
		(~module_1.resetn)->
		("Locked_register_example#module_1:action 'if (~resetn)';")
		(1)),

if_5 = (
		(module_1.write & ( ~module_1.lock_status | module_1.scan_mode | module_1.debug_unlocked ))->
		("Locked_register_example#module_1:action 'if (write & ( ~lock_status | scan_mode | debug_unlocked ))';")
		(1)),

if_6 = (
		(~module_1.write)->
		("Locked_register_example#module_1:action 'if (~write)';")
		(1)),

assign_5 = (
		(1)->
		("Locked_register_example#module_1:action 'Data_out <= 16'h0000';")
		(module_1.Data_out <= 0)),

assign_6 = (
		(1)->
		("Locked_register_example#module_1:action 'Data_out <= Data_in';")
		(module_1.Data_out <= module_1.Data_in)),

assert_1 = (
		(1)->
		("Locked_register_example#module_1:action 'write && lock_status';")
		(module_1.write && module_1.lock_status)),

assign_7 = (
		(1)->
		("Locked_register_example#module_1:action 'Data_out <= Data_out';")
		(module_1.Data_out <= module_1.Data_out)),

